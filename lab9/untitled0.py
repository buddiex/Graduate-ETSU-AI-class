# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18DQ77-4KzgxHw245geus4d0AEv6Hx3Bw
"""

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import np_utils
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold

from sklearn.preprocessing import LabelEncoder

np.random.seed(10)  #ensures everyone is on the same page

# import iris data
iris = np.loadtxt("iris.csv",delimiter=",")
# split into input/output
data = iris[:,0:4] # data is the first 4 columns
target = iris[:,4] # target is the last column
X = data[:, 2:4]  # we only take the 3rd and 4th features for plotting.
y = target

x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5
y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5

plt.figure(1, figsize=(8, 6))
plt.clf()

# Plot the training points
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1,
            edgecolor='k')
plt.xlabel('Petal length')
plt.ylabel('Petal width')

plt.xlim(x_min, x_max)
plt.ylim(y_min, y_max)

plt.show()

def create_network():
  # create model
  model = Sequential()
  model.add(Dense(8, input_dim=4, activation='relu'))
  model.add(Dense(3, activation='softmax'))
  model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
  return model

# Encode the Output variables
encoder = LabelEncoder()
encoder.fit(target)
encoded_target = encoder.transform(target)

# convert integers to dummy variables (i.e. one hot encoded)
encoded_target = np_utils.to_categorical(encoded_target)
my_model = create_network()
my_model.fit(data, encoded_target, epochs=200, batch_size=15, verbose=0)


#kfold validation

estimator = KerasClassifier(build_fn=create_network, epochs=200, batch_size=12, verbose=0)

kfold = KFold(n_splits=10, shuffle=True, random_state=15)
results = cross_val_score(estimator, data, encoded_target, cv=kfold)
print("Baseline Accuracy: %.2f%% (STDEV %.2f%%)" % (results.mean()*100, results.std()*100))


np.set_printoptions(suppress=True) #Suppress Scientific Notation

# Print array of prediction probabilities (as percentages)
print(my_model.predict(np.array(
                       [
                        [7.2, 3.1, 4.8, 1.5],
                        [3.6, 2.8, 1.8, 0.5],
                        [5.5, 3.8, 2.8, 1.2],
                        [7.8, 1.9, 5.9, 2.1],
                        [18.2, 9.1, 15.4, 5.5],
                        [0.5, 0.25, 0.9, 0.3]]
                          )
                      )*100)





from google.colab import files
files.download('network.gv.pdf')